// Generated by purs bundle 0.14.7
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Comonad"] = $PS["Control.Comonad"] || {};
  var exports = $PS["Control.Comonad"];                  
  var extract = function (dict) {
      return dict.extract;
  };
  exports["extract"] = extract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromJust = function () {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  exports["deleteBy"] = deleteBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["hush"] = hush;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  exports["filterMap"] = filterMap;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = Safe_Coerce.coerce;
  exports["unwrap"] = unwrap;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Symbol = $PS["Data.Symbol"];
  var inj = function () {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  exports["inj"] = inj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Control.Types"] = $PS["Deku.Control.Types"] || {};
  var exports = $PS["Deku.Control.Types"];
  var Scene = function (x) {
      return x;
  };
  var DOM = function (x) {
      return x;
  };
  var unsafeUnDOM = function (v) {
      return {
          context: v.context,
          value: v.value
      };
  };
  var unsafeDOM = DOM;
  var unFrame = function (dict) {
      return dict.unFrame;
  };                                                                
  var oneSubFrame = function (v) {
      return v;
  };
  var oneFrame = function (v) {
      return v;
  };
  var isSceneScene = {
      getFrame: oneFrame,
      unFrame: Scene
  };
  var getFrame = function (dict) {
      return dict.getFrame;
  };
  var functorDOM = {
      map: function (f) {
          return function (m) {
              return {
                  value: f(m.value),
                  context: m.context
              };
          };
      }
  };
  var extendDOM = {
      extend: function (f) {
          return function (v) {
              return {
                  context: v.context,
                  value: f(v)
              };
          };
      },
      Functor0: function () {
          return functorDOM;
      }
  };
  var comonadDOM = {
      extract: function (v) {
          return v.value;
      },
      Extend0: function () {
          return extendDOM;
      }
  };
  exports["oneFrame"] = oneFrame;
  exports["oneSubFrame"] = oneSubFrame;
  exports["unsafeUnDOM"] = unsafeUnDOM;
  exports["unsafeDOM"] = unsafeDOM;
  exports["getFrame"] = getFrame;
  exports["unFrame"] = unFrame;
  exports["functorDOM"] = functorDOM;
  exports["comonadDOM"] = comonadDOM;
  exports["isSceneScene"] = isSceneScene;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Graph.Attribute"] = $PS["Deku.Graph.Attribute"] || {};
  var exports = $PS["Deku.Graph.Attribute"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Cb = function (x) {
      return x;
  };
  var Attribute = function (x) {
      return x;
  };
  var unsafeUnAttribute = function (v) {
      return v;
  };
  var unsafeAttribute = Attribute;
  var prop$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "prop";
      }
  })(Type_Proxy["Proxy"].value);
  var cb$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "cb";
      }
  })(Type_Proxy["Proxy"].value);
  var cb = (function () {
      var $27 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Effect.functorEffect)(Data_Function["const"](true)));
      return function ($28) {
          return Cb($27($28));
      };
  })();
  exports["unsafeUnAttribute"] = unsafeUnAttribute;
  exports["unsafeAttribute"] = unsafeAttribute;
  exports["prop'"] = prop$prime;
  exports["cb'"] = cb$prime;
  exports["cb"] = cb;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };

  var connectXToY = function (calledExternally) {
	  return function (x) {
		  return function (y) {
			  return function (stateX) {
				  return function (stateY) {
					  return function () {
						  stateY.units[y].main.appendChild(stateX.units[x].main);
					  };
				  };
			  };
		  };
	  };
  };
  var connectXToY_ = function (x) {
	  return function (state) {
		  return connectXToY(true)(x.fromId)(x.toId)(state)(state);
	  };
  };
  exports.connectXToY_ = connectXToY_;
  var disconnectXFromY = function (calledExternally) {
	  return function (x) {
		  return function (y) {
			  return function (stateX) {
				  return function (stateY) {
					  return function () {
						  stateY.units[y].main.removeChild(stateX.units[x].main);
					  };
				  };
			  };
		  };
	  };
  };
  exports.disconnectXFromY_ = function (x) {
	  return function (state) {
		  return disconnectXFromY(true)(x.fromId)(x.toId)(state)(state);
	  };
  };
  exports.destroyUnit_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  delete state.units[ptr];
		  };
	  };
  };
  exports.renderDOM = function (arrayToApply) {
	  return function () {
		  for (var i = 0; i < arrayToApply.length; i++) {
			  arrayToApply[i]();
		  }
	  };
  };
  var makeElement_ = function (eltAlreadyExists) {
	  return function (a) {
		  return function (state) {
			  return function () {
				  var ptr = a.id;
				  state.units[ptr] = {
					  listeners: {},
					  main: eltAlreadyExists
						  ? eltAlreadyExists
						  : document.createElement(a.tag),
				  };
				  for (var i = 0; i < a.attributes.length; i++) {
					  if (a.attributes[i].value.type === "cb") {
						  var atty = a.attributes[i];
						  var el = (e) => atty.value.value(e)();
						  state.units[ptr].main.addEventListener(atty.key, el);
						  state.units[ptr].listeners[a.attributes[i].key] = el;
					  } else {
						  state.units[ptr].main.setAttribute(
							  a.attributes[i].key,
							  a.attributes[i].value.value
						  );
					  }
				  }
			  };
		  };
	  };
  };
  exports.makeElement_ = makeElement_(undefined);
  exports.makeText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: document.createElement("span"),
			  };
			  state.units[ptr].main.setAttribute("style", "white-space: pre-wrap;");
			  state.units[ptr].main.innerText = a.text;
			  //.replace(/\n/g, "<br>")
			  //.replace(/ /g, "&nbsp;");
		  };
	  };
  };
  exports.makeFFIDOMSnapshot = function () {
	  return {
		  units: {},
		  unqidfr: makeid(10),
	  };
  };
  exports.setAttribute_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var avv = a.value.value;
			  if (a.value.type === "cb") {
				  if (state.units[ptr].listeners[a.key]) {
					  state.units[ptr].main.removeEventListener(
						  a.key,
						  state.units[ptr].listeners[a.key]
					  );
				  }
				  var el = (e) => avv(e)();
				  state.units[ptr].main.addEventListener(a.key, el);
				  state.units[ptr].listeners[a.key] = el;
			  } else {
				  state.units[ptr].main.setAttribute(a.key, avv);
			  }
		  };
	  };
  };
  exports.setText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.innerHTML = a.text.
				   replace(/\n/g, "<br>")
				  .replace(/ /g, "&nbsp;");
		  };
	  };
  };
  var doSortingOnSubgraphs = function (unit, sorting) {
	  for (var i = 0; i < sorting.length; i++) {
		  var sl = unit.children[sorting[i][0]].terminalPtrs.length;
		  for (var k = 0; k < sl; k++) {
			  unit.main.insertBefore(
				  unit.children[sorting[i][0]].units[
					  unit.children[sorting[i][0]].terminalPtrs[sl - k - 1]
				  ].main,
				  unit.main.firstChild
			  );
		  }
	  }
  };
  exports.makeSubgraph_ = function (ptr) {
	  return function (sceneM) {
		  return function (envs) {
			  return function (funkyFx) {
				  return function (state) {
					  return function () {
						  var children = {};
						  var scenes = {};
						  var funk = {};
						  var unsu = {};
						  state.units[ptr] = {
							  sceneM: sceneM,
							  main: document.createElement("div"),
							  funkyFx: funkyFx,
							  isSubgraph: true,
							  scenes: scenes,
							  children: children,
							  funk: funk,
							  unsu: unsu,
						  };
						  state.units[ptr].main.setAttribute("style", "display:contents;");
						  setSubgraph_(ptr)(envs)(state)();
					  };
				  };
			  };
		  };
	  };
  };

  var setSubgraph_ = function (ptr) {
	  return function (envs) {
		  return function (state) {
			  return function () {
				  var scenes = state.units[ptr].scenes;
				  var children = state.units[ptr].children;
				  var funk = state.units[ptr].funk;
				  var unsu = state.units[ptr].unsu;
				  var needsConnecting = [];
				  for (var i = 0; i < envs.length; i++) {
					  var j = envs[i].pos;
					  if (envs[i].env === null && scenes[j] === undefined) {
					  } else if (envs[i].env !== null && scenes[j] !== undefined) {
					  } else if (envs[i].env !== null && scenes[j] === undefined) {
						  children[j] = {
							  units: {},
							  unqidfr: makeid(10),
							  parent: state,
						  };
						  scenes[j] = state.units[ptr].sceneM(envs[i].index);
						  var funkworthy = state.units[ptr].funkyFx(j)(envs[i].index)();
						  funk[j] = funkworthy.loop;
						  unsu[j] = funkworthy.unsubscribe;
						  needsConnecting.push(j);
					  } else {
						  for (var k = 0; k < children[j].terminalPtrs.length; k++) {
							  disconnectXFromY(false)(children[j].terminalPtrs[k])(ptr)(
								  children[j]
							  )(state)();
						  }
						  // unsubscribe
						  unsu[j]();
						  // delete unused
						  delete scenes[j];
						  delete children[j];
						  delete funk[j];
						  delete unsu[j];
					  }
				  }
				  var sortable = [];
				  var needsSorting = false;
				  for (var m = 0; m < envs.length; m++) {
					  if (envs[m].env === null) {
						  continue;
					  }
					  var i = envs[m].pos;
					  var applied = funk[i](envs[m].env)(scenes[i]);
					  for (var j = 0; j < applied.instructions.length; j++) {
						  // thunk
						  applied.instructions[j](children[i])();
					  }
					  needsSorting = needsSorting || applied.forOrdering !== 0;
					  sortable.push([i, applied.forOrdering]);
					  scenes[i] = applied.nextScene;
				  }
				  if (needsSorting) {
					  sortable.sort((a, b) => b[1] - a[1]);
					  doSortingOnSubgraphs(state.units[ptr], sortable);
				  }
				  for (var i = 0; i < needsConnecting.length; i++) {
					  var j = needsConnecting[i];
					  for (var k = 0; k < children[j].terminalPtrs.length; k++) {
						  connectXToY(false)(children[j].terminalPtrs[k])(ptr)(children[j])(
							  state
						  )();
					  }
				  }
			  };
		  };
	  };
  };
  var makePursx_ = function ($massiveCreate) {
	  return function (a) {
		  return function (state) {
			  return function () {
				  var ptr = a.id;
				  var html = a.html;
				  var verb = a.verb;
				  var r = a.r;
				  var entries = Object.entries(r);
				  for (var i = 0; i < entries.length; i++) {
					  var key = entries[i][0];
					  if (entries[i][1] instanceof Array) {
						  // it is an attribute
						  html = html.replace(
							  verb + key + verb,
							  "data-deku-attr-internal=" + '"' + key + '"'
						  );
					  } else {
						  html = html.replace(
							  verb + key + verb,
							  "<div data-deku-elt-internal=" + '"' + key + '"></div>'
						  );
					  }
				  }
				  var tmp = document.createElement("div");
				  tmp.innerHTML = html.trim();
				  state.units[ptr] = {
					  listeners: {},
					  main: tmp.firstChild,
				  };
				  tmp.querySelectorAll("[data-deku-attr-internal]").forEach(function (e) {
					  var key = e.getAttribute("data-deku-attr-internal");
					  makeElement_(e)({ id: ptr + "." + key, attributes: r[key] })(state)();
				  });
				  tmp.querySelectorAll("[data-deku-elt-internal]").forEach(function (e) {
					  var key = e.getAttribute("data-deku-elt-internal");
					  var toCreate = {};
					  toCreate[key] = r[key];
					  // todo: rename element to root?
					  $massiveCreate(ptr)({
						  toCreate: toCreate,
					  })(state)();
					  e.appendChild(state.units[ptr + "." + key].main);
				  });
			  };
		  };
	  };
  };
  exports.makePursx_ = makePursx_;
  exports.setSubgraph_ = setSubgraph_;
  exports.massiveCreate_ = function ($unSubgraph) {
	  return function ($makeSubgraph) {
		  return function ($makeRoot) {
			  return function ($makeElement) {
				  return function ($makeText) {
					  return function ($makePursx) {
						  return function (prefix) {
							  return function (a) {
								  return function (state) {
									  return function () {
										  // if we have pursx, it may call massiveCreate internally again, in which case we don't want to reset this
										  if (!state.terminalPtrs) {
											  state.terminalPtrs = [];
										  }
										  massiveCreateCreateStep_(prefix === null)(
											  prefix === null ? "" : prefix
										  )($unSubgraph)($makeSubgraph)($makeRoot)($makeElement)(
											  $makeText
										  )($makePursx)(a)(state)();
										  massiveCreateConnectStep_(prefix === null ? "" : prefix)(a)(
											  state
										  )();
									  };
								  };
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  var massiveCreateConnectStep_ = function ($prefix) {
	  return function (a) {
		  return function (state) {
			  return function () {
				  var entries = Object.entries(a.toCreate);
				  for (var i = 0; i < entries.length; i++) {
					  var children = Object.entries(
						  entries[i][1].myNameIs !== undefined
							  ? entries[i][1].unMyNameIs.children
							  : entries[i][1].children
					  );
					  for (var j = 0; j < children.length; j++) {
						  var toId =
							  entries[i][1].myNameIs !== undefined
								  ? entries[i][1].myNameIs
								  : $prefix + ($prefix === "" ? "" : ".") + entries[i][0];
						  var fromId =
							  children[j][1].myNameIs !== undefined
								  ? children[j][1].myNameIs
								  : toId + "." + children[j][0];

						  connectXToY_({
							  fromId: fromId,
							  toId: toId,
						  })(state)();
						  if (children[j][1].html !== undefined) {
							  continue;
						  }
						  var child =
							  children[j][1].myNameIs !== undefined
								  ? children[j][1].unMyNameIs
								  : children[j][1];
						  if (child.children !== {}) {
							  var toCreate = {};
							  toCreate[children[j][0]] = children[j][1];
							  massiveCreateConnectStep_(toId)({
								  toCreate: toCreate,
							  })(state)();
						  }
					  }
				  }
			  };
		  };
	  };
  };
  var massiveCreateCreateStep_ = function ($isTerminal) {
	  return function ($prefix) {
		  return function ($unSubgraph) {
			  return function ($makeSubgraph) {
				  return function ($makeRoot) {
					  return function ($makeElement) {
						  return function ($makeText) {
							  return function ($makePursx) {
								  return function (a) {
									  return function (state) {
										  return function () {
											  var entries = Object.entries(a.toCreate);
											  for (var i = 0; i < entries.length; i++) {
												  var value = entries[i][1];
												  if (value.myNameIs !== undefined) {
													  // my name is
													  var toCreate = {};
													  toCreate[value.myNameIs] = value.unMyNameIs;
													  massiveCreateCreateStep_($isTerminal)("")(
														  $unSubgraph
													  )($makeSubgraph)($makeRoot)($makeElement)($makeText)(
														  $makePursx
													  )({
														  toCreate: toCreate,
													  })(state)();
													  continue;
												  }
												  var key =
													  $prefix + ($prefix === "" ? "" : ".") + entries[i][0];
												  if ($isTerminal) {
													  state.terminalPtrs.push(key);
												  }
												  if (value.html !== undefined) {
													  $makePursx({
														  id: key,
														  html: value.html,
														  verb: value.verb,
														  r: value.r,
													  })(state)();
												  } else if (value.element.element !== undefined) {
													  // it's a root
													  $makeRoot({ id: key, root: value.element.element })(
														  state
													  )();
												  } else if (value.element.tag !== undefined) {
													  // it's an element
													  $makeElement({
														  id: key,
														  tag: value.element.tag,
														  attributes: value.element.attributes,
													  })(state)();
												  } else if (value.element.text !== undefined) {
													  // it's an element
													  $makeText({
														  id: key,
														  text: value.element.text,
													  })(state)();
												  } else if (value.element.subgraphMaker !== undefined) {
													  // it's a subgraph
													  $makeSubgraph({
														  id: key,
														  scenes: $unSubgraph(value.element.subgraphMaker),
														  envs: value.element.envs,
													  })(state)();
												  } else {
													  throw new Error(
														  "Don't know how to handle " +
															  key +
															  " " +
															  Object.keys(value.element))
													   ;
												  }
												  // do not keep creating if it is html
												  if (value.html !== undefined) {
													  continue;
												  }
												  massiveCreateCreateStep_(false)(key)($unSubgraph)(
													  $makeSubgraph
												  )($makeRoot)($makeElement)($makeText)($makePursx)({
													  toCreate: value.children,
												  })(state)();
											  }
										  };
									  };
								  };
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.massiveChange_ = function ($setSubgraph) {
	  return function ($setAttribute) {
		  return function ($setText) {
			  return function (a) {
				  return function (state) {
					  return function () {
						  var entries = Object.entries(a.toCreate);
						  for (var i = 0; i < entries.length; i++) {
							  var key = entries[i][0];
							  var value = entries[i][1];
							  if (value.element.element !== undefined) {
								  // it's a root, do nothing
							  } else if (value.element.tag !== undefined) {
								  // it's an element
								  for (var j = 0; j < value.element.attributes.length; j++) {
									  $setAttribute({
										  id: key,
										  key: value.element.attributes[j].key,
										  value: value.element.attributes[j].value,
									  })(state)();
								  }
							  } else if (value.element.text !== undefined) {
								  // it's an element
								  $setText({
									  id: key,
									  text: value.element.text,
								  })(state)();
							  } else if (value.element.envs !== undefined) {
								  // it's a subgraph
								  $setSubgraph({
									  id: key,
									  envs: value.element.envs,
								  })(state)();
							  } else {
								  throw new Error(
									  "Don't know how to handle " + key + " " + value)
								   ;
							  }
							  massiveChange_($changeSubgraph)($setAttribute)($setText)({
								  toChange: value.children,
							  })(state)();
						  }
					  };
				  };
			  };
		  };
	  };
  };

  exports.makeRoot_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: a.root,
			  };
		  };
	  };
  };
})(PS["Deku.Interpret"] = PS["Deku.Interpret"] || {});
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($53) {
                          return k(f($53));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = {
      map: function (f) {
          return function (v) {
              return function (k) {
                  return v(function ($54) {
                      return k(f($54));
                  });
              };
          };
      }
  };
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var v1 = p(a);
                  if (v1 instanceof Data_Maybe.Just) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 134, column 13 - line 136, column 27): " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var filter$prime = function (f) {
      return filter(function (a) {
          var v = f(a);
          if (v) {
              return new Data_Maybe.Just(a);
          };
          if (!v) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at FRP.Event (line 64, column 13 - line 66, column 25): " + [ v.constructor.name ]);
      });
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var compactableEvent = {
      compact: filter(Control_Category.identity(Control_Category.categoryFn)),
      separate: function (xs) {
          return {
              left: filter(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 47, column 13 - line 49, column 33): " + [ v.constructor.name ]);
              })(xs),
              right: filter(function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 54, column 13 - line 56, column 32): " + [ v.constructor.name ]);
              })(xs)
          };
      }
  };
  var filterableEvent = {
      filter: filter$prime,
      filterMap: filter,
      partition: function (p) {
          return function (xs) {
              return {
                  yes: filter$prime(p)(xs),
                  no: filter$prime((function () {
                      var $55 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      return function ($56) {
                          return $55(p($56));
                      };
                  })())(xs)
              };
          };
      },
      partitionMap: function (f) {
          return function (xs) {
              return {
                  left: Data_Filterable.filterMap(filterableEvent)((function () {
                      var $57 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                      return function ($58) {
                          return $57(f($58));
                      };
                  })())(xs),
                  right: Data_Filterable.filterMap(filterableEvent)(function ($59) {
                      return Data_Either.hush(f($59));
                  })(xs)
              };
          };
      },
      Compactable0: function () {
          return compactableEvent;
      },
      Functor1: function () {
          return functorEvent;
      }
  };
  var applyEvent = {
      apply: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var c1 = v(function (a) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($60) {
                                  return k(a($60));
                              }))();
                          };
                      })();
                      var c2 = v1(function (b) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($61) {
                                  return k((function (v2) {
                                      return v2(b);
                                  })($61));
                              }))();
                          };
                      })();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var applicativeEvent = {
      pure: function (a) {
          return function (k) {
              return function __do() {
                  k(a)();
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
          };
      },
      Apply0: function () {
          return applyEvent;
      }
  };
  var altEvent = {
      alt: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var c1 = v(k)();
                      var c2 = v1(k)();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var plusEvent = {
      empty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      Alt0: function () {
          return altEvent;
      }
  };
  var alternativeEvent = {
      Applicative0: function () {
          return applicativeEvent;
      },
      Plus1: function () {
          return plusEvent;
      }
  };
  var eventIsEvent = {
      fold: fold,
      keepLatest: keepLatest,
      sampleOn: sampleOn,
      fix: fix,
      Alternative0: function () {
          return alternativeEvent;
      },
      Filterable1: function () {
          return filterableEvent;
      }
  };
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["applicativeEvent"] = applicativeEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Interpret"] = $PS["Deku.Interpret"] || {};
  var exports = $PS["Deku.Interpret"];
  var $foreign = $PS["Deku.Interpret"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var FRP_Event = $PS["FRP.Event"];
  var setText = function (dict) {
      return dict.setText;
  };
  var setSubgraph = function (dict) {
      return dict.setSubgraph;
  };
  var setAttribute = function (dict) {
      return dict.setAttribute;
  };
  var massiveCreate = function (dict) {
      return dict.massiveCreate;
  };
  var makeText = function (dict) {
      return dict.makeText;
  };
  var makeSubgraph = function (dict) {
      return dict.makeSubgraph;
  };
  var makeRoot = function (dict) {
      return dict.makeRoot;
  };
  var makePursx = function (dict) {
      return dict.makePursx;
  };
  var makeElement = function (dict) {
      return dict.makeElement;
  };
  var envsToFFI = (function () {
      var go = function (v) {
          return {
              pos: v.pos,
              index: v.index,
              env: Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create)(v.env))
          };
      };
      return Data_Functor.map(Data_Functor.functorArray)(go);
  })();
  var mcUnsubgraph = function (v) {
      return v(effectfulDOMInterpret);
  };
  var effectfulDOMInterpret = {
      connectXToY: $foreign.connectXToY_,
      disconnectXFromY: $foreign.disconnectXFromY_,
      destroyUnit: $foreign.destroyUnit_,
      makeElement: $foreign.makeElement_,
      makeRoot: $foreign.makeRoot_,
      makePursx: function (noEta) {
          return $foreign.makePursx_($foreign.massiveCreate_(mcUnsubgraph)(makeSubgraph(effectfulDOMInterpret))(makeRoot(effectfulDOMInterpret))(makeElement(effectfulDOMInterpret))(makeText(effectfulDOMInterpret))(makePursx(effectfulDOMInterpret)))(noEta);
      },
      massiveCreate: function (noEta) {
          return $foreign.massiveCreate_(mcUnsubgraph)(makeSubgraph(effectfulDOMInterpret))(makeRoot(effectfulDOMInterpret))(makeElement(effectfulDOMInterpret))(makeText(effectfulDOMInterpret))(makePursx(effectfulDOMInterpret))(Data_Nullable["null"])(noEta);
      },
      makeText: $foreign.makeText_,
      makeSubgraph: function (v) {
          return function (dom) {
              return Data_Function.flip($foreign.makeSubgraph_(v.id)(v.scenes)(envsToFFI(v.envs)))(dom)(function (pos) {
                  return function (index) {
                      return function __do() {
                          var evt = FRP_Event.create();
                          var loop = function (eop) {
                              return function (scene) {
                                  var res = Deku_Control_Types.oneSubFrame(scene)(eop)(evt.push);
                                  return {
                                      instructions: res.instructions,
                                      nextScene: res.next,
                                      forOrdering: Data_Newtype.unwrap()(res.res)
                                  };
                              };
                          };
                          var unsubscribe = FRP_Event.subscribe(evt.event)(function (p) {
                              return $foreign.setSubgraph_(v.id)([ {
                                  pos: pos,
                                  index: index,
                                  env: Data_Nullable.toNullable(new Data_Maybe.Just(new Data_Either.Right(p)))
                              } ])(dom);
                          })();
                          return {
                              loop: loop,
                              unsubscribe: unsubscribe
                          };
                      };
                  };
              });
          };
      },
      setAttribute: $foreign.setAttribute_,
      setText: $foreign.setText_,
      massiveChange: function (noEta) {
          return $foreign.massiveChange_(setSubgraph(effectfulDOMInterpret))(setAttribute(effectfulDOMInterpret))(setText(effectfulDOMInterpret))(noEta);
      },
      setSubgraph: function (v) {
          return function (dom) {
              return $foreign.setSubgraph_(v.id)(envsToFFI(v.envs))(dom);
          };
      }
  };
  exports["massiveCreate"] = massiveCreate;
  exports["setAttribute"] = setAttribute;
  exports["effectfulDOMInterpret"] = effectfulDOMInterpret;
  exports["makeFFIDOMSnapshot"] = $foreign.makeFFIDOMSnapshot;
  exports["renderDOM"] = $foreign.renderDOM;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Change"] = $PS["Deku.Change"] || {};
  var exports = $PS["Deku.Change"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var unsafeChange$prime = function (dictDOMInterpret) {
      return function (dictIsSymbol) {
          return function (ptr) {
              return function (i) {
                  return function (attributes) {
                      var id = Data_Symbol.reflectSymbol(dictIsSymbol)(ptr);
                      var o = Deku_Control_Types.unsafeDOM({
                          context: {
                              res: i.res,
                              instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(i.instructions)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                                  return Deku_Interpret.setAttribute(dictDOMInterpret)({
                                      id: id,
                                      key: v1.key,
                                      value: v1.value
                                  });
                              })(Data_Functor.map(Data_Functor.functorArray)(Deku_Graph_Attribute.unsafeUnAttribute)(attributes)))
                          },
                          value: Data_Unit.unit
                      });
                      return o;
                  };
              };
          };
      };
  };
  var changeRL_Nil = {
      changeRL_: function (dictDOMInterpret) {
          return function (v) {
              return function (w) {
                  return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(w)(Data_Unit.unit);
              };
          };
      }
  };
  var changeRL_ = function (dict) {
      return dict.changeRL_;
  };
  var changeDiv_ = function (dictIsSymbol) {
      return function () {
          return {
              "change'impl": function (dictDOMInterpret) {
                  return function (ptr) {
                      return function (w) {
                          var v = Deku_Control_Types.unsafeUnDOM(w);
                          return unsafeChange$prime(dictDOMInterpret)(dictIsSymbol)(ptr)(v.context)(v.value);
                      };
                  };
              }
          };
      };
  };
  var changeAll = function () {
      return function (dictChangeRL) {
          return {
              "change'rec": function (dictDOMInterpret) {
                  return changeRL_(dictChangeRL)(dictDOMInterpret)(Type_Proxy["Proxy"].value);
              }
          };
      };
  };
  var change$primerec = function (dict) {
      return dict["change'rec"];
  };
  var change$primeimpl = function (dict) {
      return dict["change'impl"];
  };
  var changeRL_Cons = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (dictChange$prime) {
                  return function (dictChangeRL) {
                      return {
                          changeRL_: function (dictDOMInterpret) {
                              return function (v) {
                                  return function (w) {
                                      var v1 = Deku_Control_Types.unsafeUnDOM(w);
                                      return changeRL_(dictChangeRL)(dictDOMInterpret)(Type_Proxy["Proxy"].value)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(change$primeimpl(dictChange$prime)(dictDOMInterpret)(Type_Proxy["Proxy"].value)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(w)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(v1.value))))(v1.value));
                                  };
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  var change = function (dictDOMInterpret) {
      return function (dictChange) {
          return function (r) {
              var $918 = change$primerec(dictChange)(dictDOMInterpret);
              var $919 = Data_Functor.voidRight(Deku_Control_Types.functorDOM)(r);
              return function ($920) {
                  return $918($919($920));
              };
          };
      };
  };
  exports["change"] = change;
  exports["changeRL_Cons"] = changeRL_Cons;
  exports["changeRL_Nil"] = changeRL_Nil;
  exports["changeAll"] = changeAll;
  exports["changeDiv_"] = changeDiv_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Create"] = $PS["Deku.Create"] || {};
  var exports = $PS["Deku.Create"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var createAll = function () {
      return {
          create: function (dictDOMInterpret) {
              return function (w) {
                  var v = Deku_Control_Types.unsafeUnDOM(w);
                  var o = Deku_Control_Types.unsafeDOM({
                      context: {
                          res: v.context.res,
                          instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.context.instructions)([ Deku_Interpret.massiveCreate(dictDOMInterpret)({
                              toCreate: v.value
                          }) ])
                      },
                      value: Data_Unit.unit
                  });
                  return o;
              };
          }
      };
  };
  var create = function (dict) {
      return dict.create;
  };
  exports["create"] = create;
  exports["createAll"] = createAll;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Control.Functions"] = $PS["Deku.Control.Functions"] || {};
  var exports = $PS["Deku.Control.Functions"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Create = $PS["Deku.Create"];                
  var u = function (a) {
      return new Data_Tuple.Tuple(a, Data_Unit.unit);
  };
  var modifyRes$primeImpl = function (f) {
      return function (w) {
          var v = Deku_Control_Types.unsafeUnDOM(w);
          var res$prime = f(v.context.res);
          return Deku_Control_Types.unsafeDOM({
              context: {
                  res: res$prime,
                  instructions: v.context.instructions
              },
              value: res$prime
          });
      };
  };
  var makeScene = function (dictMonoid) {
      return function (dictIsScene) {
          return function (dictDOMInterpret) {
              return function (m) {
                  return function (trans) {
                      var go = function (env) {
                          return function (push) {
                              var v = m(env)(push);
                              if (v instanceof Data_Either.Left) {
                                  return Deku_Control_Types.getFrame(dictIsScene)(v.value0)(env)(push);
                              };
                              if (v instanceof Data_Either.Right) {
                                  var v1 = Deku_Control_Types.unsafeUnDOM(v.value0);
                                  return {
                                      instructions: v1.context.instructions,
                                      res: v1.context.res,
                                      next: trans(Deku_Control_Types.unsafeDOM({
                                          context: {
                                              res: Data_Monoid.mempty(dictMonoid),
                                              instructions: [  ]
                                          },
                                          value: v1.value
                                      }))
                                  };
                              };
                              throw new Error("Failed pattern match at Deku.Control.Functions (line 83, column 17 - line 97, column 10): " + [ v.constructor.name ]);
                          };
                      };
                      return Deku_Control_Types.unFrame(dictIsScene)(go);
                  };
              };
          };
      };
  };
  var makeSceneR = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (a) {
                  return function (b) {
                      return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Either.Right.create))(a))(b);
                  };
              };
          };
      };
  };
  var makeSceneR$prime = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (a) {
                  return function (b) {
                      return makeSceneR(dictMonoid)(dictDOMInterpret)(dictIsScene)(Data_Function["const"](Data_Function["const"](a)))(b);
                  };
              };
          };
      };
  };
  var loop = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (fa) {
                  return function (ma) {
                      return makeSceneR(dictMonoid)(dictDOMInterpret)(dictIsScene)(fa(ma))(loop(dictMonoid)(dictDOMInterpret)(dictIsScene)(fa));
                  };
              };
          };
      };
  };
  var initialDOMState = function (dictMonoid) {
      return {
          res: Data_Monoid.mempty(dictMonoid),
          instructions: [  ]
      };
  };
  var start = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return Deku_Control_Types.unsafeDOM({
              context: initialDOMState(dictMonoid),
              value: Data_Unit.unit
          });
      };
  };
  var infiniteLoop = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (s) {
                  return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(Data_Function["const"](Data_Function["const"](new Data_Either.Right(s))))(infiniteLoop(dictMonoid)(dictDOMInterpret)(dictIsScene));
              };
          };
      };
  };
  var withStart = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (m) {
                  return function (ct) {
                      return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(function (e) {
                          return function (p) {
                              if (e instanceof Data_Either.Left) {
                                  var f = m(e.value0)(p);
                                  return new Data_Either.Left(makeSceneR$prime(dictMonoid)(dictDOMInterpret)(dictIsScene)(f(start(dictMonoid)(dictDOMInterpret)))(ct));
                              };
                              if (e instanceof Data_Either.Right) {
                                  return new Data_Either.Right(start(dictMonoid)(dictDOMInterpret));
                              };
                              throw new Error("Failed pattern match at Deku.Control.Functions (line 115, column 13 - line 121, column 29): " + [ e.constructor.name ]);
                          };
                      })(infiniteLoop(dictMonoid)(dictDOMInterpret)(dictIsScene));
                  };
              };
          };
      };
  };
  var loopUsingSceneGWithRes = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictCreate) {
              return function () {
                  return function (sceneF0) {
                      return function (loopF) {
                          return withStart(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneScene)(function (env) {
                              return function (push) {
                                  return function (stt) {
                                      var v = sceneF0(env)(push);
                                      return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(modifyRes$primeImpl(Data_Function["const"](v.value1.value1))(Deku_Create.create(dictCreate)(dictDOMInterpret)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(stt)(v.value0))))(v.value1.value0);
                                  };
                              };
                          })(loop(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneScene)(function (f) {
                              return function (x) {
                                  return function (v) {
                                      var v1 = loopF(x)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(f));
                                      return v1(f);
                                  };
                              };
                          }));
                      };
                  };
              };
          };
      };
  };
  var loopUsingSceneG = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictCreate) {
              return function () {
                  return function (f) {
                      return loopUsingSceneGWithRes(dictMonoid)(dictDOMInterpret)(dictCreate)()(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(function (v) {
                          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1, Data_Monoid.mempty(dictMonoid)));
                      }))(f));
                  };
              };
          };
      };
  };
  exports["u"] = u;
  exports["loopUsingSceneG"] = loopUsingSceneG;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Control.Monadic"] = $PS["Deku.Control.Monadic"] || {};
  var exports = $PS["Deku.Control.Monadic"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var functorMDOM = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Deku_Control_Types.functorDOM)(f))(v);
          };
      }
  };
  var applyMDOM = {
      apply: function (v) {
          return function (v1) {
              return function (i) {
                  var fab = v(i);
                  var a = v1(fab);
                  return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(a)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(fab)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(a)));
              };
          };
      },
      Functor0: function () {
          return functorMDOM;
      }
  };
  var applicativeMDOM = {
      pure: function (a) {
          return Data_Functor.voidRight(Deku_Control_Types.functorDOM)(a);
      },
      Apply0: function () {
          return applyMDOM;
      }
  };
  exports["applicativeMDOM"] = applicativeMDOM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Graph.DOM"] = $PS["Deku.Graph.DOM"] || {};
  var exports = $PS["Deku.Graph.DOM"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Text = function (x) {
      return x;
  };
  var Style = (function () {
      function Style() {

      };
      Style.value = new Style();
      return Style;
  })();
  var Root = function (x) {
      return x;
  };   
  var OnClick = (function () {
      function OnClick() {

      };
      OnClick.value = new OnClick();
      return OnClick;
  })();
  var Element = function (x) {
      return x;
  };
  var Button_ = function (x) {
      return x;
  };
  var attrOnClickCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "click",
                  value: Deku_Graph_Attribute["cb'"](value)
              });
          };
      }
  };
  var attrDiv_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Graph_Attribute["prop'"](value)
              });
          };
      }
  };                                                                              
  var text = function ($12251) {
      return Element((function (v) {
          return {
              element: v,
              children: {}
          };
      })(Text((function (v) {
          return {
              text: v
          };
      })($12251))));
  };                                                                        
  var root = (function () {
      var $12252 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(function ($12254) {
          return (function (v) {
              return {
                  root: v
              };
          })(Element($12254));
      });
      return function ($12253) {
          return $12252((function (v) {
              return function (v1) {
                  return {
                      element: v,
                      children: v1
                  };
              };
          })(Root((function (v) {
              return {
                  element: v
              };
          })($12253))));
      };
  })();                                                                      
  var makeElt = function (elt) {
      return function (tag) {
          var $12257 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Element);
          return function ($12258) {
              return $12257((function (v) {
                  return function (v1) {
                      return {
                          element: v,
                          children: v1
                      };
                  };
              })(elt((function (v) {
                  return {
                      tag: tag,
                      attributes: v
                  };
              })($12258))));
          };
      };
  };                          
  var div$primeattr = Control_Category.identity(Control_Category.categoryFn);   
  var button = makeElt(Button_)("button");
  var attr = function (dict) {
      return dict.attr;
  };
  exports["attr"] = attr;
  exports["text"] = text;
  exports["root"] = root;
  exports["Style"] = Style;
  exports["OnClick"] = OnClick;
  exports["button"] = button;
  exports["div'attr"] = div$primeattr;
  exports["attrDiv_StyleString"] = attrDiv_StyleString;
  exports["attrOnClickCb"] = attrOnClickCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Graph.DOM.Shorthand"] = $PS["Deku.Graph.DOM.Shorthand"] || {};
  var exports = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var text = function ($123) {
      return (function (v) {
          return {
              t: v
          };
      })(Deku_Graph_DOM.text($123));
  };
  exports["text"] = text;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Pursx"] = $PS["Deku.Pursx"] || {};
  var exports = $PS["Deku.Pursx"];
  var Data_Symbol = $PS["Data.Symbol"];
  var psxR = function (dictIsSymbol) {
      return function () {
          return function (html) {
              return function (r) {
                  return {
                      psx: {
                          verb: "~",
                          html: Data_Symbol.reflectSymbol(dictIsSymbol)(html),
                          r: r
                      }
                  };
              };
          };
      };
  };
  exports["psxR"] = psxR;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                      
  var ABehavior = function (x) {
      return x;
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (e) {
                      return v(Data_Functor.map(dictFunctor)(function (v1) {
                          return function ($66) {
                              return v1(f($66));
                          };
                      })(e));
                  };
              };
          }
      };
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var behavior = ABehavior;
  var applyABehavior = function (dictFunctor) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (e) {
                      return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
                  };
              };
          },
          Functor0: function () {
              return functorABehavior(dictFunctor);
          }
      };
  };
  var applicativeABehavior = function (dictFunctor) {
      return {
          pure: function (a) {
              return function (e) {
                  return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
              };
          },
          Apply0: function () {
              return applyABehavior(dictFunctor);
          }
      };
  };
  exports["behavior"] = behavior;
  exports["sampleBy"] = sampleBy;
  exports["functorABehavior"] = functorABehavior;
  exports["applyABehavior"] = applyABehavior;
  exports["applicativeABehavior"] = applicativeABehavior;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Effect_Now = $PS["Effect.Now"];
  var FRP_Event = $PS["FRP.Event"];                            
  var withTime = function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (value) {
              return function __do() {
                  var time = Effect_Now.now();
                  return k({
                      time: time,
                      value: value
                  })();
              };
          });
      });
  };
  exports["withTime"] = withTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["FRP.Behavior.Time"] = $PS["FRP.Behavior.Time"] || {};
  var exports = $PS["FRP.Behavior.Time"];
  var Data_Functor = $PS["Data.Functor"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];                
  var instant = FRP_Behavior.behavior(function (e) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
          return v.value(v.time);
      })(FRP_Event_Time.withTime(e));
  });
  exports["instant"] = instant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Run"] = $PS["Deku.Run"] || {};
  var exports = $PS["Deku.Run"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Time = $PS["FRP.Behavior.Time"];
  var FRP_Event = $PS["FRP.Event"];
  var run = function (dictMonoid) {
      return function (trigger) {
          return function (inWorld) {
              return function (v) {
                  return function (domInfo) {
                      return function (scene) {
                          return FRP_Event.makeEvent(function (reporter) {
                              return function __do() {
                                  var evt = FRP_Event.create();
                                  var currentScene = Effect_Ref["new"](scene)();
                                  var newWorld = Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(function (v1) {
                                      return function (v2) {
                                          return {
                                              world: v1,
                                              sysTime: v2
                                          };
                                      };
                                  })(inWorld))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_DateTime_Instant.unInstant)(FRP_Behavior_Time.instant));
                                  var eventAndEnv = FRP_Behavior.sampleBy(FRP_Event.eventIsEvent)(function (v1) {
                                      return function (b) {
                                          return {
                                              trigger: b,
                                              world: v1.world,
                                              sysTime: v1.sysTime
                                          };
                                      };
                                  })(newWorld)(trigger);
                                  var subFn = function (ee) {
                                      return function __do() {
                                          var sceneNow = Effect_Ref.read(currentScene)();
                                          var fromScene = Deku_Control_Types.oneFrame(sceneNow)(ee)(evt.push);
                                          var applied = Data_Functor.map(Data_Functor.functorArray)(Data_Function.applyFlipped(domInfo))(fromScene.instructions);
                                          Deku_Interpret.renderDOM(applied)();
                                          Effect_Ref.write(fromScene.next)(currentScene)();
                                          return reporter({
                                              res: fromScene.res
                                          })();
                                      };
                                  };
                                  var unsubscribe0 = FRP_Event.subscribe(eventAndEnv)(function ($8) {
                                      return subFn(Data_Either.Left.create($8));
                                  })();
                                  var unsubscribe1 = FRP_Event.subscribe(evt.event)(function ($9) {
                                      return subFn(Data_Either.Right.create($9));
                                  })();
                                  return Control_Apply.applySecond(Effect.applyEffect)(unsubscribe0)(unsubscribe1);
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var defaultOptions = {};
  exports["run"] = run;
  exports["defaultOptions"] = defaultOptions;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var body = (function () {
      var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($11) {
          return $10($foreign["_body"]($11));
      };
  })();
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Toplevel"] = $PS["Deku.Toplevel"] || {};
  var exports = $PS["Deku.Toplevel"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Monadic = $PS["Deku.Control.Monadic"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Run = $PS["Deku.Run"];
  var Effect = $PS["Effect"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var runInElement = function (dictCreate) {
      return function () {
          return function (elt) {
              return function (scene) {
                  return function (loop) {
                      return function __do() {
                          var ffi = Deku_Interpret.makeFFIDOMSnapshot();
                          return Data_Functor["void"](Effect.functorEffect)(FRP_Event.subscribe(Deku_Run.run(Data_Monoid.monoidUnit)(Control_Applicative.pure(FRP_Event.applicativeEvent)(Data_Unit.unit))(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(Data_Unit.unit))(Deku_Run.defaultOptions)(ffi)(Deku_Control_Functions.loopUsingSceneG(Data_Monoid.monoidUnit)(Deku_Interpret.effectfulDOMInterpret)(dictCreate)()(function (v) {
                              return function (push) {
                                  var v1 = scene(push);
                                  return new Data_Tuple.Tuple(Deku_Graph_DOM.root(elt)(v1.value0), v1.value1);
                              };
                          })(function (env) {
                              return function (ctrl) {
                                  if (env instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(Deku_Control_Monadic.applicativeMDOM)(ctrl);
                                  };
                                  if (env instanceof Data_Either.Right) {
                                      return loop(env.value0)(ctrl);
                                  };
                                  throw new Error("Failed pattern match at Deku.Toplevel (line 43, column 29 - line 45, column 41): " + [ env.constructor.name ]);
                              };
                          })))((function () {
                              var $11 = Control_Applicative.pure(Effect.applicativeEffect);
                              return function ($12) {
                                  return $11((function (v) {
                                      return v.res;
                                  })($12));
                              };
                          })()))();
                      };
                  };
              };
          };
      };
  };
  var runInBody = function (dictCreate) {
      return function () {
          return function (scene) {
              return function (loop) {
                  return function __do() {
                      var b$prime = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.body)();
                      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.toElement)(b$prime))(function (elt) {
                          return runInElement(dictCreate)()(elt)(scene)(loop);
                      })();
                  };
              };
          };
      };
  };
  exports["runInBody"] = runInBody;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Deku.Example.Toplevel"] = $PS["Deku.Example.Toplevel"] || {};
  var exports = $PS["Deku.Example.Toplevel"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Change = $PS["Deku.Change"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Deku_Toplevel = $PS["Deku.Toplevel"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var main = Deku_Toplevel.runInBody(Deku_Create.createAll())()(function (push) {
      return Deku_Control_Functions.u(Deku_Pursx.psxR({
          reflectSymbol: function () {
              return "\x0a<div ~mydiv~>\x0a  <h1>Hello!</h1>\x0a  <p>This is what a no-frills deku app looks like.</p>\x0a  <p>It is powered by pursx, a html-like format inspired by JSX.</p>\x0a  <h2>Why Deku</h2>\x0a  <ul>\x0a    <li>It's fast.</li>\x0a    <li>\x0a      Well, that's about it for now... it's fast,\x0a      but perhaps it has other advantages!\x0a    </li>\x0a  </ul>\x0a  <p>\x0a    <span style=\"font-weight:800;\">Gratuitous demo alert:</span>\x0a      click the button below to change the background of this div.\x0a  </p>\x0a  ~mybutton~\x0a</div>\x0a";
          }
      })()(Type_Proxy["Proxy"].value)({
          mydiv: [  ],
          mybutton: Deku_Graph_DOM.button([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Deku_Graph_Attribute.cb(Data_Function["const"](push(Data_Unit.unit)))) ])(Deku_Graph_DOM_Shorthand.text("Click me to change the background color"))
      }));
  })(function (v) {
      return Data_Function["const"](Deku_Change.change(Deku_Interpret.effectfulDOMInterpret)(Deku_Change.changeAll()(Deku_Change.changeRL_Cons({
          reflectSymbol: function () {
              return "root.psx.mydiv";
          }
      })()()(Deku_Change.changeDiv_({
          reflectSymbol: function () {
              return "root.psx.mydiv";
          }
      })())(Deku_Change.changeRL_Nil)))({
          "root.psx.mydiv": Deku_Graph_DOM["div'attr"]([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrDiv_StyleString)(Deku_Graph_DOM.Style.value)("background-color: rgb(195,212,209);") ])
      }));
  });
  exports["main"] = main;
})(PS);
PS["Deku.Example.Toplevel"].main();